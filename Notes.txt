TODO:
    1. Add option to start and stop animation with a button                                         *DONE*
    2. Add a counter with modulus which shows the current number of degrees                         *DONE*
        - Note: Did not require modulus due to instead looping 0-360 degrees
            - Simplifies calculations in future modifications and expansions
    3. Add option to set a specific frame to be shown                                               *DONE*
        - Add slider to speed if possible (Optional)                                                *DONE*
            - Possibly buttons
            - Use 'setDuration'
                - Suggestion: 5000, 10000, and 15000
    ------------------------------------------------------------------------------------------------------
    4. Add a matplotlib-graph to the state window                                                   *DONE*
    5. Add additional graphs or a selected choice of graphs.                                        *DONE*
    6. Add a point and a line (e.g. red) to illustrate the current state                            *DONE*
        - Use modulus (%) to limit the position of the indicator to 0-360 degrees
    7. Expand the parallel animation to update the indicator in the graph                           *DONE*
    ------------------------------------------------------------------------------------------------------
    8. Add easement-curve to the parallel animation (Optional)                                   *REMOVED*
    9. Finalize the design of the 'State'-window
    10. Adapt the 'Result'-window to the newly added changes
        - Also includes renaming the windows
    ------------------------------------------------------------------------------------------------------
    11. Add adiabatic analysis
        - Add required values to 'Default'-file, 'Custom'-file, and manual input
    12. Add simple analysis                                                                      *REMOVED*
    13. Expand and rename 'schmidtanalysis.csv'
    14. Add matplotlib-graphs which show the results from these analyses to the State-window
        - Including potential alterations to the window-design
    15. Add the created graphs to the result-file (PDF)
        - Moment, efficiency
        - Comparison of values from different analysis-methods
    ------------------------------------------------------------------------------------------------------
    16. Improve the checking of the validity of the input-data

    *OPTIONAL*
    A. Add a ReadMe- or Info-file available from the Intro-window
    B. Add a file-explorer for the custom JSON-file

    17. Finalize the design of the application
    18. Remove unnecessary files
        - Including this
    19. Code clean-up and documentation for each method and variable
    20. Create an executable and check whether it works


*********************************************************************************************************


Notes:
    - Changed from PySide2 to PyQt5
    - Used "decorations" to add the animation
    - Changed from video to VTK-animation
    - Development of animation proved difficult due to visualization of change and performance issues
        - Tried using 'FuncAnimation()' and 'blit=True'
        - May change to 'QtChart', 'PyQtGraph', or 'PyQWT'
            - Not using 'PyQWT' due to not receiving support since 2014
    - Add graph / table of efficiency
    - Double-check heat-equations before delivery
    - The analysis-methods were first presented by Berchowitz and Urieli (1984)
    - Write about operating fluid, which is helium
        - User can add their own, but helium could be used as a default-value if it isn't too specific
    - Add graphs for Schmidt-, adiabatic-, and simple analysis showing temperature variations with explanation for the different
      considerations they make (e.g., isothermal and adiabatic)
    - Simple analysis was not added due to time, usability, and complexity
    - Need to alter manual input
    - Assumptions:
        - As shown in the figure, V_heater and V_cooler = 0
            - P. 28 in PowerPoint
            - Idealized optimal configuration


*********************************************************************************************************


Possible features:
    - Set size-parameters of animation from the given input-data
    - Synchronize animation and data plotting
    - Set custom degree-stepsize when calculating results (e.g. 1-15 degrees)